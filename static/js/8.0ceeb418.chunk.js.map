{"version":3,"sources":["component/spineViewer3.js"],"names":["SpineViewer","spineData","JSON","parse","document","getElementById","innerHTML","indexData","skin","name","prefix","skinIndex","aniIndex","modelIndex","skinList","Object","keys","reset","bind","changeModel","nextAnimation","animationsData","state","color","speed","animations","animation","loop","openInfo","modelList","model","loading","json","fullscreen","scale","building","progress","spineRef","createRef","rootRef","loopRef","isMobile","this","current","value","setState","loadData","length","updateAnimation","parser","file","then","data","loadWidget","aniData","style","width","position","ref","backgroundColor","display","boxShadow","onClick","padding","zIndex","left","top","height","Component"],"mappings":"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","file":"static/js/8.0ceeb418.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { Spine } from \"./spine\";\nimport {\n  IconButton,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport HomeIcon from '@material-ui/icons/Home';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport parser from \"../utils/skel\";\nimport isMobile from \"../utils/isMobile\";\nexport default class SpineViewer extends Component {\n  constructor() {\n    super();\n    const spineData = JSON.parse(\n      document.getElementById(\"SPINEDATA3\").innerHTML\n    );\n    const indexData = JSON.parse(\n      document.getElementById(\"INDEXDATA3\").innerHTML\n    )\n    this.spineData = spineData.skin;\n    this.name = spineData.name;\n    this.prefix = spineData.prefix;\n    this.skinIndex = indexData.skinIndex;\n    this.aniIndex = 0;\n    this.modelIndex = 0;\n    this.skinList = Object.keys(this.spineData);\n    // Object.keys(spineData);\n    // console.log(spineData);\n    this.reset = this.reset.bind(this);\n    this.changeModel = this.changeModel.bind(this);\n    this.nextAnimation = this.nextAnimation.bind(this);\n    //this.onLoopChange = this.onLoopChange.bind(this);\n    //this.onClickFullScreen = this.onClickFullScreen.bind(this);\n    //this.encode = this.encode.bind(this);\n    this.animationsData = [];\n    this.state = {\n      color: \"00000000\",\n      speed: 1,\n      animations: [],\n      animation: \"\",\n      loop: true,\n      openInfo: false,\n      skin: this.skinList[this.skinIndex],\n      modelList: Object.keys(this.spineData[this.skinList[this.skinIndex]]),\n      model: Object.keys(this.spineData[this.skinList[this.skinIndex]])[0],\n      loading: true,\n      json: {},\n      fullscreen: false,\n      scale: 0.3,\n      building: false,\n      progress: 0,\n    };\n    this.spineRef = createRef();\n    this.rootRef = createRef();\n    this.loopRef = createRef();\n    this.isMobile = isMobile();\n  }\n  reset() {\n    if (!this.state.loading) {\n      this.spineRef.current.reset();\n    }\n  }\n  // onLoopChange(e) {\n  //   // console.log(e.target.checked);\n  //   this.setState({ loop: e.target.checked });\n  //   if (!this.state.loading && !this.state.building) {\n  //     this.spineRef.current.updateAnimation(\n  //       this.state.animation,\n  //       e.target.checked\n  //     );\n  //   }\n  // }\n  changeModel(){\n    if(this.modelIndex == 0){\n      this.modelIndex = 2;\n    } else {\n      this.modelIndex = 0;\n    }\n    const value = this.state.modelList[this.modelIndex];\n    this.setState({\n      model : value,\n      animation : \"\",\n      animations : [],\n      loading: true,\n    });\n    this.loadData(this.state.skin, value);\n  }\n\n  nextAnimation() {\n    this.aniIndex++;\n    if(this.aniIndex >= this.state.animations.length) this.aniIndex = 0;\n    this.setState({animation: this.state.animations[(this.aniIndex)]});\n    if(!this.state.loading){\n      this.spineRef.current.updateAnimation(this.state.animations[(this.aniIndex)], this.state.loop);\n    }\n  }\n  componentDidMount() {\n    // this.rootRef.current.addEventListener(\"fullscreenchange\", () => {\n    //   if (document.fullscreenElement) {\n    //     this.setState({\n    //       scale:\n    //         Math.min(\n    //           document.documentElement.clientHeight - 40,\n    //           document.documentElement.clientWidth - 314\n    //         ) / 1000,\n    //     });\n    //   } else {\n    //     this.setState({\n    //       fullscreen: false,\n    //       scale: 0.3,\n    //     });\n    //   }\n    // });\n    this.loadData(\n      this.skinList[this.skinIndex],\n      Object.keys(this.spineData[this.skinList[this.skinIndex]])[0]\n    );\n  }\n  loadData(skin, model) {\n    parser(this.prefix + this.spineData[skin][model].file + \".skel\").then(\n      (data) => {\n        // console.log(data);\n        const animations = Object.keys(data.animations);\n        this.setState({\n          json: data,\n          animations: animations,\n          animation: animations[0],\n        });\n        this.spineRef.current.loadWidget(\n          data,\n          this.prefix + this.spineData[skin][model].file + \".atlas\",\n          animations[0],\n          this.state.color,\n          this.state.loop,\n          this.spineData[this.state.skin][this.state.model].skin || \"default\",\n          this.state.speed,\n          (aniData) => {\n            this.animationsData = aniData;\n            this.setState({ loading: false });\n          }\n        );\n      }\n    );\n  }\n  render() {\n    return (\n      <div style={{ width: \"fit-content\", position: \"relative\" }}>\n        <Card\n          ref={this.rootRef}\n          style={{ backgroundColor: '#00000000', display: \"flex\", width: \"fit-content\", boxShadow: \"none\" }}\n        >\n          <CardActionArea\n            onClick={() => {this.nextAnimation()} }>\n            <CardContent\n            style = {{padding: 0}}\n            >\n            <Spine\n              ref={this.spineRef}\n              scale={this.state.scale}\n              loading={this.state.loading}\n            >\n            </Spine>\n            </CardContent>\n          </CardActionArea>\n          <IconButton\n                  style = {{backgroundColor: '#00000000', position: 'absolute', zIndex: 1, left: 10, top: 170, width:30, height: 30}}\n                  onClick={() => {\n                    this.changeModel()\n                  }}\n                >\n                  <HomeIcon></HomeIcon>\n          </IconButton>\n        </Card>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}